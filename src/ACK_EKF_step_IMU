#!/usr/bin/env python
import rospy
import roslib
import sys
import time
import numpy as np
from geometry_msgs.msg import Pose2D
from geometry_msgs.msg import TwistStamped
from sensor_msgs.msg import NavSatFix
from std_msgs.msg import Float32
from scipy import linalg


class AckEkf:

    def __init__(self, r=0.07, l=0.36, v1=0.02, v2=0.5):

        # Publishes the current [x, y, theta] state estimate
        self.pose_pub = rospy.Publisher("/EKF/Pose2D", Pose2D)

        # Computes the current state estimate from the gps data
        self.gps_sub = rospy.Subscriber("/fix", NavSatFix, self.gps_callback)
        self.gps_vel_sub = rospy.Subscriber("/vel", TwistStamped, self.gps_vel_callback)

        # Updates the local speed and wheel angle
        self.velocity_sub = rospy.Subscriber("/speed_current", Float32, self.velocity_callback)
        self.angle_sub = rospy.Subscriber("/IMU/theta", Float32, self.angle_callback)

        # Store last time for dt calculation
        self.last_time = rospy.Time.now().to_sec()

        # Define vehicle dimensions - wheel radius
        self.r = r
        # Distance between axels
        self.L = l

        # GPS reference point and time variable to set GPS_zero to the first measured coordinate
        self.t = 0
        self.gps_zero = [0, 0]
	self.lat_conv = 111320
	self.lon_conv = 79968

        # Measurement variance
        self.var1 = v1 ** 2
        # Vehicle state variance
        self.var2 = v2 ** 2

        # Vehicle speed
        self.w = 1
        # Vehicle wheel angle
        self.p = 0

        # Measured state
        self.z = np.zeros(3)

        # Measurement matrix
        self.H = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 0]])
        self.HT = self.H.T

        # Measurement covariance
        self.V = np.eye(3) * self.var1

        # Vehicle covariance
        self.W = np.eye(3) * self.var2

        # Estimate covariance
        self.P = np.zeros((3, 3))

        # Estimated state
        self.xf = np.zeros(3)

        # Predicted state
        self.xp = np.zeros(3)

    def gps_callback(self, data):

        # Compute time delta between last measurement
        dt = rospy.Time.now().to_sec() - self.last_time
        self.last_time = rospy.Time.now().to_sec()
        dd = self.r * dt

    	# Convert the GPS coordinates to meters away from the first recorded coordinate
    	if self.t == 0:
    	    self.t = 1;
    	    self.gps_zero[0] = data.latitude
    	    self.gps_zero[1] = data.longitude
    	    self.z[0] = 0
    	    self.z[1] = 0
    	    self.z[2] = self.p
            self.lat_conv = 111320
            self.lon_conv = 40075 * np.cos(self.gps_zero[1] * 180.0/np.pi) / 360.0
    	else:
    	    self.z[0] = (data.latitude - self.gps_zero[0]) * self.lat_conv
    	    self.z[1] = (data.longitude - self.gps_zero[1]) * self.lon_conv
    	    self.z[2] = self.p

            # Compute step of Kalman filter
            self.xp[0] = self.xf[0] + dd * self.w * np.cos(self.xf[2])
            self.xp[1] = self.xf[1] + dd * self.w * np.sin(self.xf[2])
            self.xp[2] = self.xf[2] + dd * np.tan(self.p) / self.L
            F1 = [1.0, 0.0, -dd * self.w * np.sin(self.xf[2])]
            F2 = [0, 1, dd * self.w * np.cos(self.xf[2])]
            F = np.array([F1, F2, [0, 0, 1]])
            FT = F.T
            pp = np.dot(F, np.dot(self.P, FT)) + self.V
            y = np.dot(self.H, self.z) - np.dot(self.H, self.xp)
            S = np.dot(self.H, np.dot(pp, self. HT)) + self.W
            SI = linalg.inv(S)
            kal = np.dot(pp, np.dot(self.HT, SI))
            self.xf = self.xp + np.dot(kal, y)
            self.P = pp - np.dot(kal, np.dot(self.H, pp))
    	
    	# Publish the Pose estimate
    	pose = Pose2D()
    	pose.x = self.xf[0]
    	pose.y = self.xf[1]
    	pose.theta = self.xf[2]
        self.pose_pub.publish(pose)

    def gps_vel_callback(self, data):
        x = data.twist.linear.x
        y = data.twist.linear.y
        v_xy = np.sqrt(x**2 + y**2)
        if v_xy > 0.4:
            self.w = v_xy
        else:
            self.w = 0

    def velocity_callback(self, data):
        # Update w from data
        self.w = data.data

    def angle_callback(self, data):
        # Update p from data
        self.p = data.data


def main():
    rospy.init_node('ack_ekf', anonymous=True)
    kalman = AckEkf()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    kalman.output.release()


if __name__ == '__main__':
    main()
