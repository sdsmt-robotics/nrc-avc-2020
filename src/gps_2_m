#!/usr/bin/env python
import rospy
import roslib
import sys
import time
import numpy as np
from geometry_msgs.msg import Pose2D
from sensor_msgs.msg import NavSatFix
from std_msgs.msg import Float32
from scipy import linalg


class gps2m:

    def __init__(self):

        # Publishes the current [x, y, theta] state estimate
        self.meters_pub = rospy.Publisher("/fix_m", Pose2D)

        # Computes the current state estimate from the gps data
        self.gps_sub = rospy.Subscriber("/fix", NavSatFix, self.gps_callback)

        # Conversions from lat/lon to meters (Accurate for small displacements)
        self.lat2m = lat2m
        self.lon2m = lon2m

        # GPS reference point and time variable to set GPS_zero to the first measured coordinate
        self.t = 0
        self.gps_zero = [0, 0]
	self.lat_conv = 111320
	self.lon_conv = 79968

        # Relative position in meters
        self.x = 0
        self.y = 0

    def gps_callback(self, data):
    	# Convert the GPS coordinates to meters away from the first recorded coordinate
    	if self.t == 0:
    	    self.t = 1;
    	    self.gps_zero[0] = data.latitude
    	    self.gps_zero[1] = data.longitude
    	    self.x = 0
    	    self.y = 0
            self.lat_conv = 111320
            self.lon_conv = 40075 * np.cos(self.gps_zero[1] * 180.0/np.pi) / 360.0
    	else:
    	    self.x = (data.latitude - self.gps_zero[0]) * self.lat_conv
    	    self.y = (data.longitude - self.gps_zero[1]) * self.lon_conv
    	
    	# Publish the Pose estimate
    	pose = Pose2D()
    	pose.x = self.x
    	pose.y = self.y
    	pose.theta = 0
        self.meters_pub.publish(pose)


def main():
    rospy.init_node('meters_from_gps', anonymous=True)
    kalman = gps2m()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    kalman.output.release()


if __name__ == '__main__':
    main()
